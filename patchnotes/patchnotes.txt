/** Patch Notes **/

/** 4.1.2 07/05/2019 **/
* Added Standings documentation
* Offloaded object documentation to Github Wiki 

/** 4.1.0 07/05/2019 **/
* Major improvement in all main paginated functions including attendees entrants and sets
* Added functionality to pull the Standings of an event

/** 4.0.20 07/02/2019 **/
* Shifted GetAttendees from tournament to use the standard pagination query

/** 4.0.19 06/02/2019 **/
* Fixed a bug where User object never is fetchable
* Added two functions to the Attendee class that allow for fetching of list of Phase or PhaseGroups that the Attendee has entered 

/** 4.0.12 05/31/2019 **/
* Added an attendee search by sponsor tag to the Tournament object

/** 4.0.10 05/30/2019 **/
* Added an attendee search feature to the Tournament object

/** 4.0.8 05/04/2019 **/
* Fixed tournament queries to all reference new ID! type

/** 4.0.7 04/12/2019 **/
* Uncommented Tournament aggregation queries, but included a warning message to divert users to Event in the instance of lowered usability.

/** 4.0.6 04/10/2019 **/
* Update all queries to enforce ID! schema data type

/** 4.0.5 04/04/2019 **/
* Altered Event Attendee pulling logic by accessing the Tournament Schema instead of querying entrants

/** 4.0.4 03/31/2019 **/
* Added an option to AttendeeOptions and EntrantOptions stating if seeds are unpublished
* Added conditional logic to Event getAttendees and getEntrants that on unpublished seeds query the Event schema itself

/** 4.0.3 :: 03/25/2019 **/
* Repaired the StreamQueue query and object. Warns on null stream queue. modified IStreamQueue interfaces

/** 4.0.1 :: 03/10/2019 **/
* Fixed wiring for V1 library. Was broken before

/** 4.0.0 :: 03/10/2019 **/
* Overhaul for new GraphQL API (see docs)

/** 3.3.4 **/
* Bug fix: Conditional logic in getPlayer1Score, getPlayer2Score in GGSet would be null if a 0 value was read

/** 3.3.3 :: 1/24/2019 **/
* Added disableLog and enableLog functions to do just that
* Overhauled the README for aesthetic/informative purposes
** Added image preview
** Added information badges
** Removed draconian example
** Added more contact information

/** 3.3.2 :: 1/22/2019 **/
* Added gulp build process
* Added a sandbox environment

/** 3.3.1 :: 1/19/2019 **
* Added getTop8Sets to Event object
* Major Bug Fix: Players were not coming back correctly from GGSet getWinner/getLoser

/** 3.2.0 :: 1/17/2019 **
* Added better access to the built-in logging. 
* Added setLogLevel and addLog accessor function on the index js
* Added the Logger object on the index js

/** 3.1.0 :: 1/16/2019 **
* Add back in the missing Character class (oops)

/** 3.0.0 :: 1/12/2019 **/
* Refactored library to TypeScript
* Renamed Set object to GGSet to not interfere with native JavaScript Set

/** 2.3.6 :: 08-08-2018 **/
* Fixed bug where data doesn't store for an event if not cached option selected

/** 2.3.5 :: 08-08-2018 **/
* Critical bug fix. Event's conditional data loading was broken due to an incorrect calling of async/await

/** 2.3.4 :: 08-07-2018 **/
* Added methods to resolve Set and Player objects via an ID and static method
* Added functions to get started and completed times for a set

/** 2.3.3 :: 07-25-2018 **/
* Updated getIncompleteSets and getCompleteSets all to use the included options.
* Fixed bad options listed in the README

/** 2.3.2 :: 07-25-2018 **/
* Updated README for options in getIncompleteSets and getCompleteSets

/** 2.3.1 :: 07-25-2018 **/
* Added getIncompleteSets and getCompleteSets to Tournament, Event, and Phase objects
* Bug fix: data loading cache keys now account for raw encoding type so that no issues arise where
pulling a different encoding type crashes the pulling process

/** 2.3.0 :: 07-25-2018 **/
* Set object has been refactored. Now accepts two players instead of Winner Loser. 
This allows for in-progress sets to be valid objects.

/** 2.2.1 :: 07-24-2018 **/
* Hotfix in Tournament.js no longer parses leading number tournament names as Id numbers
	* previously tournaments like "21xx-cameron-s-birthday-bash-1" parsed "21" as the Tournament ID

/** 2.2.0 :: 07-12-2018 **/
* Added the Character class supporting the SmashGG Character API
* Added unit tests for Character class

/** 2.1.3 :: 07-10-2018 **/
* Converted bulk pull methods (getSets, getPhaseGroups, etc) to have options instead of just one bool param
* Added concurrecy control variable in options of every Bulk Pull method

/** 2.1.2 :: 07-09-2018 **/
* Added methods that get sets and players for a given phase
* Added methods that get sets and players for a given event
* Fixed unit test logic that was still caching old results
* Added individual tests to the package json scripts

/** 2.1.1 **/
* Whoops... Forgot to expose VideoGame to index.js

/** 2.1.0 :: 07-09-2018 **/
* Added VideoGame API support w/ Unit tests

/** 2.0.1 :: 07-09-2018 **/
* Moved `eslint` to dev-dependencies
* Removed unused `co` package from dependencies
* Slight additions to package.json

/** 2.0 :: 07-08-2018 **/
# MAJOR
* Added Convenience methods to Tournament, Event, Phase, and PhaseGroup
These functions now return Promises that resolve the respective expected object. 
'ready' event will now be deprecated.
* Event now takes eventId parameter first, and then tournamentId. eventId may now be an actual event Id number.
* Altered Tournament, Event, Phase, and PhaseGroup constructors to now implement an options object
This options object now consumes the previous isCached and expands parameters
Options object now includes optional rawEncoding parameter allowing for space optimization by storing raw data in base64 or utf8 string
* Added functions to get Date objects back from date getters in SmashGG objects, 
alongside getDateString methods that return the strings from V1

# MINOR
* Altered some logic that pulls bulk data like Players and Sets to be more optimized for async/await
* Now verbose log all smashgg api urls use in object creation
* All smashgg objects now have convenient toString methods
* Better error handling for non-existent smashgg objects coming back with 404s
* Added sample2 which uses convenience method
* Added eslint for format linting
* Event object creation now by default gets Tournament data to which the Event belongs to

/** 1.0.6 :: 03-07-2018 **/
* Added ability for Event to take an ID for an event. 
At the end of the constructor, an optional ID can now be added. 
The rest of the params can even be null.
* Added unit test capability for this addition, but it needs to be
really fleshed out. However it proves the functionality works.

/** 1.0.5 :: 02-01-2018 **/
* Fixed documentation for Set constructor.
* Added section to README about submitting issues or feature requests.

/** 1.0.3 :: 01-31-2018 **/
* Updated documentation with a Table of Contents. Fixed incomplete example in Tournament docs.

/** 1.0.2 :: 01-30-2018 **/
* Refactored errors on SmashGG Object instantiation to emit an 'error' event coupled with an Error object.
* Refactored the simple getters to no longer return a string on null, but instead to Winston log the error.
This should make the getters more dev friendly
* Refactored the simple getters to all reference a similar function since they're all doing the same thing,
unless they return an object property
* Included changes to overall docu. Added a section about integrating a Winston log file.

/** 1.0.1 :: 01-29-2018 **/
* Included the github repository in package.json
